<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2017-12-23 20:55:40"><sys_remote_update_set><application display_value="Global">global</application><application_name>Global</application_name><application_scope>global</application_scope><application_version/><collisions/><commit_date/><deleted/><description/><inserted/><name>GITSYNC_v0.0.1</name><origin_sys_id/><release_date/><remote_sys_id>0b0f4e5c0fd38f00d8dc305be1050eb2</remote_sys_id><state>loaded</state><summary/><sys_class_name>sys_remote_update_set</sys_class_name><sys_created_by>rwKeller</sys_created_by><sys_created_on>2017-12-23 20:55:39</sys_created_on><sys_id>d0521a9c0fd38f00d8dc305be1050e6f</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>rwKeller</sys_updated_by><sys_updated_on>2017-12-23 20:55:39</sys_updated_on><update_set/><update_source/><updated/></sys_remote_update_set><sys_update_xml><action>DELETE</action><application display_value="Global">global</application><category>customer</category><comments/><name>sys_ui_action_view_5c20969c0fd38f00d8dc305be1050ea7</name><payload><![CDATA[<record_update table="sys_ui_action_view"><sys_ui_action_view action="DELETE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>rwKeller</sys_created_by><sys_created_on>2017-12-23 20:46:06</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>5c20969c0fd38f00d8dc305be1050ea7</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Github Sync.Admin</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Global">global</sys_scope><sys_ui_action display_value="Github Sync">8a6f429c0fd38f00d8dc305be1050eeb</sys_ui_action><sys_ui_view display_value="Admin" name="admin">cf7ed89cdd79a000a7e1d1303d19954d</sys_ui_view><sys_update_name>sys_ui_action_view_5c20969c0fd38f00d8dc305be1050ea7</sys_update_name><sys_updated_by>rwKeller</sys_updated_by><sys_updated_on>2017-12-23 20:46:06</sys_updated_on><visibility>include</visibility></sys_ui_action_view></record_update>]]></payload><remote_update_set display_value="GITSYNC_v0.0.1">d0521a9c0fd38f00d8dc305be1050e6f</remote_update_set><replace_on_upgrade>false</replace_on_upgrade><sys_created_by>rwKeller</sys_created_by><sys_created_on>2017-12-23 20:55:39</sys_created_on><sys_id>10521a9c0fd38f00d8dc305be1050e70</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>rwKeller</sys_updated_by><sys_updated_on>2017-12-23 20:55:39</sys_updated_on><table/><target_name>include</target_name><type>UI View Action</type><update_domain>global</update_domain><update_set/><view/></sys_update_xml><sys_update_xml><action>INSERT_OR_UPDATE</action><application display_value="Global">global</application><category>customer</category><comments/><name>sys_ui_action_8a6f429c0fd38f00d8dc305be1050eeb</name><payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;Github Sync&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;comments/&gt;&lt;condition&gt;gs.hasRole('admin')&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;hint/&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;name&gt;Github Sync&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[// CREATED BY: ROBERT KELLER
// DATE: 12/14/2017

/*
    DESCRIPTION:
    VERSION: 0.0.1
*/

// GITHUB CONFIG
const GIT_USER_NAME = 'robkelle';
const GIT_REPO_NAME = 'git-snow-sync';
const GIT_PATH_NAME = 'log';
const TOKEN = '7386325e1cf75825b8d75d405ae4c5f140df908f';
const URI = 'https://api.github.com/repos/' + GIT_USER_NAME + '/' + GIT_REPO_NAME + '/contents/' + GIT_PATH_NAME + '/';
const FULL = 'ServiceNow sync';
const EMAIL = 'kellerwrobert@gmail.com';

// DECLARING GLOBAL VARIABLES
var sysidRetrieved, sysidLocal, grUpdateSet, grRetrievedUpdateSet, grScope, grUpdateXML, fileName, updateSetIds;

function uploadUpdateSetToGithub(sysidRetrieved, fileName) {
    var getHttpReponse, executeResponse, httpResponseStatus, results;
    getHttpReponse = new sn_ws.RESTMessageV2();
    getHttpReponse.setHttpMethod('GET');
    getHttpReponse.setEndpoint(URI + fileName);
    getHttpReponse.setRequestHeader('Authorization', 'Bearer ' + TOKEN);
    executeResponse = getHttpReponse.execute();
    httpResponseStatus = executeResponse.getStatusCode();
    gitApiResponse = executeResponse.getBody();
    results = JSON.parse(gitApiResponse);
    updateFile(TOKEN, fileName, GlideStringUtil.base64Encode(buildUpdateSetXML(sysidRetrieved).toString()), results.sha.toString());
}

function buildUpdateSetXML(sysidRetrieved) {
    var tempRetrievedUpdateSet, parentpdateSetXml, childUpdateSetXml, updateSetXml;
    tempRetrievedUpdateSet = new GlideRecord('sys_remote_update_set');
    tempRetrievedUpdateSet.get(sysidRetrieved);
    parentpdateSetXml = getXML(tempRetrievedUpdateSet);
    childUpdateSetXml = getChildUpdates(tempRetrievedUpdateSet.sys_id.toString());
    parentpdateSetXml = parentpdateSetXml.replace('&lt;?xml version="1.0" encoding="UTF-8"?&gt;', '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;unload unload_date="' + GlideSysDateUtil.getUMTDateTimeString() + '"&gt;');
    updateSetXml = parentpdateSetXml + childUpdateSetXml + '&lt;/unload&gt;';
    return updateSetXml;
}

// CONVERTS THE RECORD PROPERTIES FROM AN OBJECT INTO XML
function getXML(record) {
    var xmlSerializer, xml;
    xmlSerializer = new GlideRecordXMLSerializer();
    xml = xmlSerializer.serialize(record);
    return xml;
}

// LOOPS THROUGH THE UPDATE SETS AND RETURNS AN ARRAY OF SYS_IDS THAT ARE STILL IN PROGRESS
function getSetRecords() {
    var setRecord, inProgressSets;
    setRecord = new GlideRecord('sys_update_set');
    setRecord.addEncodedQuery('state=in progress^sys_id=' + current.sys_id.toString());
    setRecord.query();
    inProgressSets = [];

    while (setRecord.next()) {
        inProgressSets.push(setRecord.sys_id.toString());
    }
    return inProgressSets;
}

// CREATES NET NEW OR UPDATES EXISTING UPDATE SETS
function updateFile(TOKEN, fileName, content, sha) {
    var body, getHttpReponse, message;
    try {
        body = {
            "message": fileName + " being updated/created.",
            "committer": {
                "name": FULL,
                "email": EMAIL
            },
            "content": content,
        };
        if (sha) {
            body.sha = sha;
        }
        getHttpReponse = new sn_ws.RESTMessageV2();
        getHttpReponse.setHttpMethod("PUT");
        getHttpReponse.setEndpoint(URI + fileName);
        getHttpReponse.setRequestHeader('Authorization', 'Bearer ' + TOKEN);
        getHttpReponse.setRequestBody(JSON.stringify(body));
        getHttpReponse.execute();
    } catch (error) {
        message = error.getMessage();
        gs.print(message);
    }
}

function getChildUpdates(parentSet) {
    var updatesXML, sysUpdates;
    sysUpdates = new GlideRecord('sys_update_xml');
    sysUpdates.query('remote_update_set', parentSet);
    while (sysUpdates.next()) {
        if (updatesXML) {
            updatesXML += getXML(sysUpdates).replace('&lt;?xml version="1.0" encoding="UTF-8"?&gt;', '');
        } else {
            updatesXML = getXML(sysUpdates).replace('&lt;?xml version="1.0" encoding="UTF-8"?&gt;', '');
        }
    }
    return updatesXML;
}

// MAIN PROGRAM
updateSetIds = getSetRecords();
for (updateSetId in updateSetIds) {
    sysidLocal = updateSetIds[updateSetId];
    grUpdateSet = new GlideRecord('sys_update_set');

    if (grUpdateSet.get(sysidLocal)) {
        grRetrievedUpdateSet = new GlideRecord('sys_remote_update_set');
        grRetrievedUpdateSet.initialize();
        grRetrievedUpdateSet.description = grUpdateSet.description;
        grRetrievedUpdateSet.name = grUpdateSet.name;
        grRetrievedUpdateSet.release_date = grUpdateSet.release_date;
        grRetrievedUpdateSet.remote_sys_id = grUpdateSet.sys_id;
        grRetrievedUpdateSet.application = grUpdateSet.application;
        grRetrievedUpdateSet.state = "loaded";
        grScope = new GlideRecord('sys_scope');
        grScope.get(grUpdateSet.application);

        if (grScope.isValid()) {
            grRetrievedUpdateSet.application_name = grScope.name;
            grRetrievedUpdateSet.application_scope = grScope.scope;
            grRetrievedUpdateSet.application_version = grScope.version;
        }

        if (sysidRetrieved = grRetrievedUpdateSet.insert()) {
            grUpdateXML = new GlideRecord('sys_update_xml');
            grUpdateXML.addQuery('update_set', sysidLocal);
            grUpdateXML.query();

            while (grUpdateXML.next()) {
                grUpdateXML.remote_update_set = sysidRetrieved;
                grUpdateXML.update_set = '';
                grUpdateXML.insert();
            }

            fileName = ((grUpdateSet.getValue('name') + '.xml').replace(/\s+/g, '_'));
            uploadUpdateSetToGithub(sysidRetrieved, fileName);
            grUpdateXML = new GlideRecord('sys_update_xml');
            grUpdateXML.addQuery('remote_update_set', sysidRetrieved);
            grUpdateXML.query();
            grUpdateXML.deleteMultiple();
            grRetrievedUpdateSet = new GlideRecord('sys_remote_update_set');
            grRetrievedUpdateSet.get(sysidRetrieved);
            grRetrievedUpdateSet.deleteRecord();
        }
    }
}]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;rwKeller&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2017-12-23 20:45:17&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;8a6f429c0fd38f00d8dc305be1050eeb&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;Github Sync&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_8a6f429c0fd38f00d8dc305be1050eeb&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;rwKeller&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-12-23 20:54:48&lt;/sys_updated_on&gt;&lt;table&gt;sys_update_set&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload><remote_update_set display_value="GITSYNC_v0.0.1">d0521a9c0fd38f00d8dc305be1050e6f</remote_update_set><replace_on_upgrade>false</replace_on_upgrade><sys_created_by>rwKeller</sys_created_by><sys_created_on>2017-12-23 20:55:39</sys_created_on><sys_id>5c521a9c0fd38f00d8dc305be1050e6f</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>rwKeller</sys_updated_by><sys_updated_on>2017-12-23 20:55:39</sys_updated_on><table>sys_update_set</table><target_name>Github Sync</target_name><type>UI Action</type><update_domain>global</update_domain><update_set/><view/></sys_update_xml></unload>